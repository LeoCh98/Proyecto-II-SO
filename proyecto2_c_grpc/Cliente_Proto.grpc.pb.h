// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: Cliente_Proto.proto
#ifndef GRPC_Cliente_5fProto_2eproto__INCLUDED
#define GRPC_Cliente_5fProto_2eproto__INCLUDED

#include "Cliente_Proto.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace Cliente_Productor {

class ClienteServicios final {
 public:
  static constexpr char const* service_full_name() {
    return "Cliente_Productor.ClienteServicios";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status enviarMensaje(::grpc::ClientContext* context, const ::Cliente_Productor::Mensaje& request, ::Cliente_Productor::estadoMSJ* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Cliente_Productor::estadoMSJ>> AsyncenviarMensaje(::grpc::ClientContext* context, const ::Cliente_Productor::Mensaje& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Cliente_Productor::estadoMSJ>>(AsyncenviarMensajeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Cliente_Productor::estadoMSJ>> PrepareAsyncenviarMensaje(::grpc::ClientContext* context, const ::Cliente_Productor::Mensaje& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Cliente_Productor::estadoMSJ>>(PrepareAsyncenviarMensajeRaw(context, request, cq));
    }
    virtual ::grpc::Status publicarMensaje(::grpc::ClientContext* context, const ::Cliente_Productor::Mensaje& request, ::Cliente_Productor::estadoMSJ* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Cliente_Productor::estadoMSJ>> AsyncpublicarMensaje(::grpc::ClientContext* context, const ::Cliente_Productor::Mensaje& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Cliente_Productor::estadoMSJ>>(AsyncpublicarMensajeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Cliente_Productor::estadoMSJ>> PrepareAsyncpublicarMensaje(::grpc::ClientContext* context, const ::Cliente_Productor::Mensaje& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Cliente_Productor::estadoMSJ>>(PrepareAsyncpublicarMensajeRaw(context, request, cq));
    }
    virtual ::grpc::Status recibirMSJServer(::grpc::ClientContext* context, const ::Cliente_Productor::solicitudMSJ& request, ::Cliente_Productor::Mensaje* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Cliente_Productor::Mensaje>> AsyncrecibirMSJServer(::grpc::ClientContext* context, const ::Cliente_Productor::solicitudMSJ& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Cliente_Productor::Mensaje>>(AsyncrecibirMSJServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Cliente_Productor::Mensaje>> PrepareAsyncrecibirMSJServer(::grpc::ClientContext* context, const ::Cliente_Productor::solicitudMSJ& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Cliente_Productor::Mensaje>>(PrepareAsyncrecibirMSJServerRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void enviarMensaje(::grpc::ClientContext* context, const ::Cliente_Productor::Mensaje* request, ::Cliente_Productor::estadoMSJ* response, std::function<void(::grpc::Status)>) = 0;
      virtual void enviarMensaje(::grpc::ClientContext* context, const ::Cliente_Productor::Mensaje* request, ::Cliente_Productor::estadoMSJ* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void publicarMensaje(::grpc::ClientContext* context, const ::Cliente_Productor::Mensaje* request, ::Cliente_Productor::estadoMSJ* response, std::function<void(::grpc::Status)>) = 0;
      virtual void publicarMensaje(::grpc::ClientContext* context, const ::Cliente_Productor::Mensaje* request, ::Cliente_Productor::estadoMSJ* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void recibirMSJServer(::grpc::ClientContext* context, const ::Cliente_Productor::solicitudMSJ* request, ::Cliente_Productor::Mensaje* response, std::function<void(::grpc::Status)>) = 0;
      virtual void recibirMSJServer(::grpc::ClientContext* context, const ::Cliente_Productor::solicitudMSJ* request, ::Cliente_Productor::Mensaje* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Cliente_Productor::estadoMSJ>* AsyncenviarMensajeRaw(::grpc::ClientContext* context, const ::Cliente_Productor::Mensaje& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Cliente_Productor::estadoMSJ>* PrepareAsyncenviarMensajeRaw(::grpc::ClientContext* context, const ::Cliente_Productor::Mensaje& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Cliente_Productor::estadoMSJ>* AsyncpublicarMensajeRaw(::grpc::ClientContext* context, const ::Cliente_Productor::Mensaje& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Cliente_Productor::estadoMSJ>* PrepareAsyncpublicarMensajeRaw(::grpc::ClientContext* context, const ::Cliente_Productor::Mensaje& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Cliente_Productor::Mensaje>* AsyncrecibirMSJServerRaw(::grpc::ClientContext* context, const ::Cliente_Productor::solicitudMSJ& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Cliente_Productor::Mensaje>* PrepareAsyncrecibirMSJServerRaw(::grpc::ClientContext* context, const ::Cliente_Productor::solicitudMSJ& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status enviarMensaje(::grpc::ClientContext* context, const ::Cliente_Productor::Mensaje& request, ::Cliente_Productor::estadoMSJ* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Cliente_Productor::estadoMSJ>> AsyncenviarMensaje(::grpc::ClientContext* context, const ::Cliente_Productor::Mensaje& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Cliente_Productor::estadoMSJ>>(AsyncenviarMensajeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Cliente_Productor::estadoMSJ>> PrepareAsyncenviarMensaje(::grpc::ClientContext* context, const ::Cliente_Productor::Mensaje& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Cliente_Productor::estadoMSJ>>(PrepareAsyncenviarMensajeRaw(context, request, cq));
    }
    ::grpc::Status publicarMensaje(::grpc::ClientContext* context, const ::Cliente_Productor::Mensaje& request, ::Cliente_Productor::estadoMSJ* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Cliente_Productor::estadoMSJ>> AsyncpublicarMensaje(::grpc::ClientContext* context, const ::Cliente_Productor::Mensaje& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Cliente_Productor::estadoMSJ>>(AsyncpublicarMensajeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Cliente_Productor::estadoMSJ>> PrepareAsyncpublicarMensaje(::grpc::ClientContext* context, const ::Cliente_Productor::Mensaje& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Cliente_Productor::estadoMSJ>>(PrepareAsyncpublicarMensajeRaw(context, request, cq));
    }
    ::grpc::Status recibirMSJServer(::grpc::ClientContext* context, const ::Cliente_Productor::solicitudMSJ& request, ::Cliente_Productor::Mensaje* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Cliente_Productor::Mensaje>> AsyncrecibirMSJServer(::grpc::ClientContext* context, const ::Cliente_Productor::solicitudMSJ& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Cliente_Productor::Mensaje>>(AsyncrecibirMSJServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Cliente_Productor::Mensaje>> PrepareAsyncrecibirMSJServer(::grpc::ClientContext* context, const ::Cliente_Productor::solicitudMSJ& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Cliente_Productor::Mensaje>>(PrepareAsyncrecibirMSJServerRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void enviarMensaje(::grpc::ClientContext* context, const ::Cliente_Productor::Mensaje* request, ::Cliente_Productor::estadoMSJ* response, std::function<void(::grpc::Status)>) override;
      void enviarMensaje(::grpc::ClientContext* context, const ::Cliente_Productor::Mensaje* request, ::Cliente_Productor::estadoMSJ* response, ::grpc::ClientUnaryReactor* reactor) override;
      void publicarMensaje(::grpc::ClientContext* context, const ::Cliente_Productor::Mensaje* request, ::Cliente_Productor::estadoMSJ* response, std::function<void(::grpc::Status)>) override;
      void publicarMensaje(::grpc::ClientContext* context, const ::Cliente_Productor::Mensaje* request, ::Cliente_Productor::estadoMSJ* response, ::grpc::ClientUnaryReactor* reactor) override;
      void recibirMSJServer(::grpc::ClientContext* context, const ::Cliente_Productor::solicitudMSJ* request, ::Cliente_Productor::Mensaje* response, std::function<void(::grpc::Status)>) override;
      void recibirMSJServer(::grpc::ClientContext* context, const ::Cliente_Productor::solicitudMSJ* request, ::Cliente_Productor::Mensaje* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::Cliente_Productor::estadoMSJ>* AsyncenviarMensajeRaw(::grpc::ClientContext* context, const ::Cliente_Productor::Mensaje& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Cliente_Productor::estadoMSJ>* PrepareAsyncenviarMensajeRaw(::grpc::ClientContext* context, const ::Cliente_Productor::Mensaje& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Cliente_Productor::estadoMSJ>* AsyncpublicarMensajeRaw(::grpc::ClientContext* context, const ::Cliente_Productor::Mensaje& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Cliente_Productor::estadoMSJ>* PrepareAsyncpublicarMensajeRaw(::grpc::ClientContext* context, const ::Cliente_Productor::Mensaje& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Cliente_Productor::Mensaje>* AsyncrecibirMSJServerRaw(::grpc::ClientContext* context, const ::Cliente_Productor::solicitudMSJ& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Cliente_Productor::Mensaje>* PrepareAsyncrecibirMSJServerRaw(::grpc::ClientContext* context, const ::Cliente_Productor::solicitudMSJ& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_enviarMensaje_;
    const ::grpc::internal::RpcMethod rpcmethod_publicarMensaje_;
    const ::grpc::internal::RpcMethod rpcmethod_recibirMSJServer_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status enviarMensaje(::grpc::ServerContext* context, const ::Cliente_Productor::Mensaje* request, ::Cliente_Productor::estadoMSJ* response);
    virtual ::grpc::Status publicarMensaje(::grpc::ServerContext* context, const ::Cliente_Productor::Mensaje* request, ::Cliente_Productor::estadoMSJ* response);
    virtual ::grpc::Status recibirMSJServer(::grpc::ServerContext* context, const ::Cliente_Productor::solicitudMSJ* request, ::Cliente_Productor::Mensaje* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_enviarMensaje : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_enviarMensaje() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_enviarMensaje() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status enviarMensaje(::grpc::ServerContext* /*context*/, const ::Cliente_Productor::Mensaje* /*request*/, ::Cliente_Productor::estadoMSJ* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestenviarMensaje(::grpc::ServerContext* context, ::Cliente_Productor::Mensaje* request, ::grpc::ServerAsyncResponseWriter< ::Cliente_Productor::estadoMSJ>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_publicarMensaje : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_publicarMensaje() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_publicarMensaje() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status publicarMensaje(::grpc::ServerContext* /*context*/, const ::Cliente_Productor::Mensaje* /*request*/, ::Cliente_Productor::estadoMSJ* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestpublicarMensaje(::grpc::ServerContext* context, ::Cliente_Productor::Mensaje* request, ::grpc::ServerAsyncResponseWriter< ::Cliente_Productor::estadoMSJ>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_recibirMSJServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_recibirMSJServer() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_recibirMSJServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status recibirMSJServer(::grpc::ServerContext* /*context*/, const ::Cliente_Productor::solicitudMSJ* /*request*/, ::Cliente_Productor::Mensaje* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestrecibirMSJServer(::grpc::ServerContext* context, ::Cliente_Productor::solicitudMSJ* request, ::grpc::ServerAsyncResponseWriter< ::Cliente_Productor::Mensaje>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_enviarMensaje<WithAsyncMethod_publicarMensaje<WithAsyncMethod_recibirMSJServer<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_enviarMensaje : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_enviarMensaje() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::Cliente_Productor::Mensaje, ::Cliente_Productor::estadoMSJ>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Cliente_Productor::Mensaje* request, ::Cliente_Productor::estadoMSJ* response) { return this->enviarMensaje(context, request, response); }));}
    void SetMessageAllocatorFor_enviarMensaje(
        ::grpc::MessageAllocator< ::Cliente_Productor::Mensaje, ::Cliente_Productor::estadoMSJ>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Cliente_Productor::Mensaje, ::Cliente_Productor::estadoMSJ>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_enviarMensaje() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status enviarMensaje(::grpc::ServerContext* /*context*/, const ::Cliente_Productor::Mensaje* /*request*/, ::Cliente_Productor::estadoMSJ* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* enviarMensaje(
      ::grpc::CallbackServerContext* /*context*/, const ::Cliente_Productor::Mensaje* /*request*/, ::Cliente_Productor::estadoMSJ* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_publicarMensaje : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_publicarMensaje() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::Cliente_Productor::Mensaje, ::Cliente_Productor::estadoMSJ>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Cliente_Productor::Mensaje* request, ::Cliente_Productor::estadoMSJ* response) { return this->publicarMensaje(context, request, response); }));}
    void SetMessageAllocatorFor_publicarMensaje(
        ::grpc::MessageAllocator< ::Cliente_Productor::Mensaje, ::Cliente_Productor::estadoMSJ>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Cliente_Productor::Mensaje, ::Cliente_Productor::estadoMSJ>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_publicarMensaje() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status publicarMensaje(::grpc::ServerContext* /*context*/, const ::Cliente_Productor::Mensaje* /*request*/, ::Cliente_Productor::estadoMSJ* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* publicarMensaje(
      ::grpc::CallbackServerContext* /*context*/, const ::Cliente_Productor::Mensaje* /*request*/, ::Cliente_Productor::estadoMSJ* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_recibirMSJServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_recibirMSJServer() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::Cliente_Productor::solicitudMSJ, ::Cliente_Productor::Mensaje>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Cliente_Productor::solicitudMSJ* request, ::Cliente_Productor::Mensaje* response) { return this->recibirMSJServer(context, request, response); }));}
    void SetMessageAllocatorFor_recibirMSJServer(
        ::grpc::MessageAllocator< ::Cliente_Productor::solicitudMSJ, ::Cliente_Productor::Mensaje>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Cliente_Productor::solicitudMSJ, ::Cliente_Productor::Mensaje>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_recibirMSJServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status recibirMSJServer(::grpc::ServerContext* /*context*/, const ::Cliente_Productor::solicitudMSJ* /*request*/, ::Cliente_Productor::Mensaje* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* recibirMSJServer(
      ::grpc::CallbackServerContext* /*context*/, const ::Cliente_Productor::solicitudMSJ* /*request*/, ::Cliente_Productor::Mensaje* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_enviarMensaje<WithCallbackMethod_publicarMensaje<WithCallbackMethod_recibirMSJServer<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_enviarMensaje : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_enviarMensaje() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_enviarMensaje() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status enviarMensaje(::grpc::ServerContext* /*context*/, const ::Cliente_Productor::Mensaje* /*request*/, ::Cliente_Productor::estadoMSJ* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_publicarMensaje : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_publicarMensaje() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_publicarMensaje() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status publicarMensaje(::grpc::ServerContext* /*context*/, const ::Cliente_Productor::Mensaje* /*request*/, ::Cliente_Productor::estadoMSJ* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_recibirMSJServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_recibirMSJServer() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_recibirMSJServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status recibirMSJServer(::grpc::ServerContext* /*context*/, const ::Cliente_Productor::solicitudMSJ* /*request*/, ::Cliente_Productor::Mensaje* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_enviarMensaje : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_enviarMensaje() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_enviarMensaje() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status enviarMensaje(::grpc::ServerContext* /*context*/, const ::Cliente_Productor::Mensaje* /*request*/, ::Cliente_Productor::estadoMSJ* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestenviarMensaje(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_publicarMensaje : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_publicarMensaje() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_publicarMensaje() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status publicarMensaje(::grpc::ServerContext* /*context*/, const ::Cliente_Productor::Mensaje* /*request*/, ::Cliente_Productor::estadoMSJ* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestpublicarMensaje(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_recibirMSJServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_recibirMSJServer() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_recibirMSJServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status recibirMSJServer(::grpc::ServerContext* /*context*/, const ::Cliente_Productor::solicitudMSJ* /*request*/, ::Cliente_Productor::Mensaje* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestrecibirMSJServer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_enviarMensaje : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_enviarMensaje() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->enviarMensaje(context, request, response); }));
    }
    ~WithRawCallbackMethod_enviarMensaje() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status enviarMensaje(::grpc::ServerContext* /*context*/, const ::Cliente_Productor::Mensaje* /*request*/, ::Cliente_Productor::estadoMSJ* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* enviarMensaje(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_publicarMensaje : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_publicarMensaje() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->publicarMensaje(context, request, response); }));
    }
    ~WithRawCallbackMethod_publicarMensaje() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status publicarMensaje(::grpc::ServerContext* /*context*/, const ::Cliente_Productor::Mensaje* /*request*/, ::Cliente_Productor::estadoMSJ* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* publicarMensaje(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_recibirMSJServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_recibirMSJServer() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->recibirMSJServer(context, request, response); }));
    }
    ~WithRawCallbackMethod_recibirMSJServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status recibirMSJServer(::grpc::ServerContext* /*context*/, const ::Cliente_Productor::solicitudMSJ* /*request*/, ::Cliente_Productor::Mensaje* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* recibirMSJServer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_enviarMensaje : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_enviarMensaje() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Cliente_Productor::Mensaje, ::Cliente_Productor::estadoMSJ>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Cliente_Productor::Mensaje, ::Cliente_Productor::estadoMSJ>* streamer) {
                       return this->StreamedenviarMensaje(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_enviarMensaje() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status enviarMensaje(::grpc::ServerContext* /*context*/, const ::Cliente_Productor::Mensaje* /*request*/, ::Cliente_Productor::estadoMSJ* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedenviarMensaje(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Cliente_Productor::Mensaje,::Cliente_Productor::estadoMSJ>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_publicarMensaje : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_publicarMensaje() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Cliente_Productor::Mensaje, ::Cliente_Productor::estadoMSJ>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Cliente_Productor::Mensaje, ::Cliente_Productor::estadoMSJ>* streamer) {
                       return this->StreamedpublicarMensaje(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_publicarMensaje() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status publicarMensaje(::grpc::ServerContext* /*context*/, const ::Cliente_Productor::Mensaje* /*request*/, ::Cliente_Productor::estadoMSJ* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedpublicarMensaje(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Cliente_Productor::Mensaje,::Cliente_Productor::estadoMSJ>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_recibirMSJServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_recibirMSJServer() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Cliente_Productor::solicitudMSJ, ::Cliente_Productor::Mensaje>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Cliente_Productor::solicitudMSJ, ::Cliente_Productor::Mensaje>* streamer) {
                       return this->StreamedrecibirMSJServer(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_recibirMSJServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status recibirMSJServer(::grpc::ServerContext* /*context*/, const ::Cliente_Productor::solicitudMSJ* /*request*/, ::Cliente_Productor::Mensaje* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedrecibirMSJServer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Cliente_Productor::solicitudMSJ,::Cliente_Productor::Mensaje>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_enviarMensaje<WithStreamedUnaryMethod_publicarMensaje<WithStreamedUnaryMethod_recibirMSJServer<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_enviarMensaje<WithStreamedUnaryMethod_publicarMensaje<WithStreamedUnaryMethod_recibirMSJServer<Service > > > StreamedService;
};

}  // namespace Cliente_Productor


#endif  // GRPC_Cliente_5fProto_2eproto__INCLUDED
