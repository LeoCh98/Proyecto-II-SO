// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: Cliente_Proto.proto

#include "Cliente_Proto.pb.h"
#include "Cliente_Proto.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace Cliente_Productor {

static const char* ClienteServicios_method_names[] = {
  "/Cliente_Productor.ClienteServicios/enviarMensaje",
  "/Cliente_Productor.ClienteServicios/recibirMSJServer",
};

std::unique_ptr< ClienteServicios::Stub> ClienteServicios::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ClienteServicios::Stub> stub(new ClienteServicios::Stub(channel, options));
  return stub;
}

ClienteServicios::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_enviarMensaje_(ClienteServicios_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_recibirMSJServer_(ClienteServicios_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ClienteServicios::Stub::enviarMensaje(::grpc::ClientContext* context, const ::Cliente_Productor::Mensaje& request, ::Cliente_Productor::estadoMSJ* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Cliente_Productor::Mensaje, ::Cliente_Productor::estadoMSJ, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_enviarMensaje_, context, request, response);
}

void ClienteServicios::Stub::async::enviarMensaje(::grpc::ClientContext* context, const ::Cliente_Productor::Mensaje* request, ::Cliente_Productor::estadoMSJ* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Cliente_Productor::Mensaje, ::Cliente_Productor::estadoMSJ, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_enviarMensaje_, context, request, response, std::move(f));
}

void ClienteServicios::Stub::async::enviarMensaje(::grpc::ClientContext* context, const ::Cliente_Productor::Mensaje* request, ::Cliente_Productor::estadoMSJ* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_enviarMensaje_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Cliente_Productor::estadoMSJ>* ClienteServicios::Stub::PrepareAsyncenviarMensajeRaw(::grpc::ClientContext* context, const ::Cliente_Productor::Mensaje& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Cliente_Productor::estadoMSJ, ::Cliente_Productor::Mensaje, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_enviarMensaje_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Cliente_Productor::estadoMSJ>* ClienteServicios::Stub::AsyncenviarMensajeRaw(::grpc::ClientContext* context, const ::Cliente_Productor::Mensaje& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncenviarMensajeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClienteServicios::Stub::recibirMSJServer(::grpc::ClientContext* context, const ::Cliente_Productor::solicitudMSJ& request, ::Cliente_Productor::Mensaje* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Cliente_Productor::solicitudMSJ, ::Cliente_Productor::Mensaje, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_recibirMSJServer_, context, request, response);
}

void ClienteServicios::Stub::async::recibirMSJServer(::grpc::ClientContext* context, const ::Cliente_Productor::solicitudMSJ* request, ::Cliente_Productor::Mensaje* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Cliente_Productor::solicitudMSJ, ::Cliente_Productor::Mensaje, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_recibirMSJServer_, context, request, response, std::move(f));
}

void ClienteServicios::Stub::async::recibirMSJServer(::grpc::ClientContext* context, const ::Cliente_Productor::solicitudMSJ* request, ::Cliente_Productor::Mensaje* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_recibirMSJServer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Cliente_Productor::Mensaje>* ClienteServicios::Stub::PrepareAsyncrecibirMSJServerRaw(::grpc::ClientContext* context, const ::Cliente_Productor::solicitudMSJ& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Cliente_Productor::Mensaje, ::Cliente_Productor::solicitudMSJ, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_recibirMSJServer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Cliente_Productor::Mensaje>* ClienteServicios::Stub::AsyncrecibirMSJServerRaw(::grpc::ClientContext* context, const ::Cliente_Productor::solicitudMSJ& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncrecibirMSJServerRaw(context, request, cq);
  result->StartCall();
  return result;
}

ClienteServicios::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClienteServicios_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClienteServicios::Service, ::Cliente_Productor::Mensaje, ::Cliente_Productor::estadoMSJ, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClienteServicios::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Cliente_Productor::Mensaje* req,
             ::Cliente_Productor::estadoMSJ* resp) {
               return service->enviarMensaje(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClienteServicios_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClienteServicios::Service, ::Cliente_Productor::solicitudMSJ, ::Cliente_Productor::Mensaje, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClienteServicios::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Cliente_Productor::solicitudMSJ* req,
             ::Cliente_Productor::Mensaje* resp) {
               return service->recibirMSJServer(ctx, req, resp);
             }, this)));
}

ClienteServicios::Service::~Service() {
}

::grpc::Status ClienteServicios::Service::enviarMensaje(::grpc::ServerContext* context, const ::Cliente_Productor::Mensaje* request, ::Cliente_Productor::estadoMSJ* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClienteServicios::Service::recibirMSJServer(::grpc::ServerContext* context, const ::Cliente_Productor::solicitudMSJ* request, ::Cliente_Productor::Mensaje* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace Cliente_Productor

